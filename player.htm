<!DOCTYPE html>
<html>
    <head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0;" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <link rel="manifest" href="./podcasts.webmanifest">
    <link rel="apple-touch-icon" sizes="192x192" href="./apple-touch-icon.png">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
        <title>üéß Notable Podcasts</title>
        <style>
            html {
                height:100%;
            }
            body {
                text-align:center;
                font-family: Helvetica, "Trebuchet MS", Verdana;
                height: 100%;
                width:100%;
                overflow: hidden;
                padding: 0;
                margin: 0;
            }
            h2 {
                padding-top: 20px;
                padding-bottom: 20px;
            }
            #player audio {
                margin-left: auto;
                margin-right: auto;
            }
            #note {
                width: 80%;
                height: 100px;
            }
            textarea {
                width: 80%;
                margin-top: 10px;
            }
            #log {
                padding-left:10%;
                text-align: left;
            }
            #textarea {
                border: 1px solid black;
            }
            button {
                border: 1px solid black;
                padding: 5px;
            }
            #log li {
                padding-top: 3px;
                padding-bottom: 3px;
            }
            #log b {
                font-size: 0.8em;
                font-family: sans-serif;
            }

            #menu {
                padding-top: 20px;
                background-color: #bdd4e7;
                background-image: linear-gradient(180deg, #bdd4e7 0%, #8693ab 74%);
            }
            #menu button {
                border: 1px solid black;
                padding: 5px;
                width: 5em;
                height: 5em;
            }
            #menu button strong {
                display: block;
                text-align: center;
                font-size: 22px;
            }
            #menu button span {
                font-size: 10px;
                line-height: 11px;
            }

            #player audio {
                width: 90%;
                margin-top: 20px;
                margin-bottom: 20px;
            }

        </style>
    </head>
    <body style='width:100%'>
        <div id='loaded' style="display: none; height: 100%;flex:1">
            <div style='display:flex; flex-direction: column; height: 100%; justify-content: space-between;'>
                <div style="flex:2; justify-items: start;">
                    <h2>üéß Notable Podcasts</h2>
                    <div id='player'></div>
                    <div>
                        <textarea id='note' placeholder = 'Type your insight here' style='padding:10px;'></textarea><br>
                        <button id='insertnote'>Submit note</button>
                    </div>
                </div>

                <div style="flex:2; overflow-y: scroll; flex-grow: 2;">
                    <h3>Your notes:</h3>
                    <div id='log'>
        
                    </div>
                </div>

                <div id='menu' style='flex-direction: row; flex: 1; justify-content: space-between;'>
                    <button id='share'><strong>‚¨áÔ∏è</strong><span>Save notes</span></button>
                    <button id='clear'><strong>üí•</strong><span>Clear data</span></button>
                    <button id='playnotes' style='display: none'><strong>üìù</strong><span>Play Notes</span></button>
                    <button id='customplay'><strong>‚èØ</strong><span>Play/Pause</span></button>
                </div>
            </div>
        </div>
        <div id='empty'  style="display: none;text-align: center;">
            <h2>üéß Notable Podcasts</h2>
            <p style="margin:20px">Welcome to notable podcasts! Insert an audio file URL to start playing:</p>
            <input type="file" id="file" name="file" accept=".mp3,audio/*" style="background-color:#e5ebee; width:80%;padding:10px;font-size:1.2em"/>
            <p>Or paste an '.mp3' url from the web:</p>
            <div style="background-color:#e5ebee; width:80%;padding:10px;font-size:1.2em;margin-left:auto;margin-right:auto">
                <input type='url' id='newaudio'>
                <button id='newepisode'>‚èØ Download</button>
            </div>
            <div id='feedback' style='font-style:italic;color:red;padding:10px'>
            </div>
            
        
            <p>‚¨ÜÔ∏è <i>Add to Home Screen to work like an App</i></p>
        </div>
        <script src='assets/localforage.nopromises.min.js' type="text/javascript"></script>
        <script>
            function exportToCsv(filename, rows) {
                var processRow = function (row) {
                    var finalVal = '';
                    for (var j = 0; j < row.length; j++) {
                        var innerValue = row[j] === null ? '' : row[j].toString();
                        if (row[j] instanceof Date) {
                            innerValue = row[j].toLocaleString();
                        };
                        var result = innerValue.replace(/"/g, '""');
                        if (result.search(/("|,|\n)/g) >= 0)
                            result = '"' + result + '"';
                        if (j > 0)
                            finalVal += ',';
                        finalVal += result;
                    }
                    return finalVal + '\n';
                };

                var csvFile = '';
                for (var i = 0; i < rows.length; i++) {
                    csvFile += processRow(rows[i]);
                }

                var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
                if (navigator.msSaveBlob) { // IE 10+
                    navigator.msSaveBlob(blob, filename);
                } else {
                    var link = document.createElement("a");
                    if (link.download !== undefined) { // feature detection
                        // Browsers that support HTML5 download attribute
                        var url = URL.createObjectURL(blob);
                        link.setAttribute("href", url);
                        link.setAttribute("download", filename);
                        link.style.visibility = 'hidden';
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                    }
                }
            }

            function sec2time( secs ) {
                const originalSeconds = Math.floor( secs );
                let seconds = originalSeconds % 60;
                const originalMinutes = ( originalSeconds - seconds ) / 60;
                let minutes = originalMinutes % 60;
                const hours = ( originalMinutes - minutes ) / 60;
                let printtime = '';
                const time = [
                    hours,
                    minutes,
                    seconds,
                ].map( t => ( ( t< 10 ) ? '0' + t : t ) ).join(':');
                return time;
            }
            function note2log( note ) {
                const time = sec2time( note.time );
                const el = document.createElement( 'li' );
                el.innerHTML = '<b>' + time + '</b> : ' + note.note;
                document.getElementById('log').append( el );
            }


            document.addEventListener( 'DOMContentLoaded', function () {
                var data;
                let player;
                let logging = true;
                localforage.getItem( 'playbackData' ).then( dataReady );

                function initializeYoutube( data ) {
                var tag = document.createElement('script');
                tag.src = "https://www.youtube.com/iframe_api";
                var firstScriptTag = document.getElementsByTagName('script')[0];
                firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

                // 3. This function creates an <iframe> (and YouTube player)
                //    after the API code downloads.
                window.onYouTubeIframeAPIReady = function () {
                    player = new YT.Player('player', {
                        height: '20%',
                        width: '100%',
                        videoId: data.youtube,
                        events: {
                        'onReady': onPlayerReady,
                        'onStateChange': onPlayerStateChange
                        }
                    });
                    }
                    console.log( player );
                    // 4. The API will call this function when the video player is ready.
                    function onPlayerReady(event) {
                        //event.target.playVideo();
                    }

                    // 5. The API calls this function when the player's state changes.
                    //    The function indicates that when playing a video (state=1),
                    //    the player should play for six seconds and then stop.
                    var done = false;
                    function onPlayerStateChange(event) {
                        if (event.data == YT.PlayerState.PAUSED ) {
                            const time = player.getCurrentTime();
                            data.playback = time;
                            data.notes.push( { note: 'pause', time: time } );
                            localforage.setItem( 'playbackData', data );
                            note2log( { note: 'pause', time: time } );
                        }
                    }
                }

                function dataReady( previous ) {
                    if( previous ) {
                        data = previous;
                        data.notes.forEach( note2log );
                        document.getElementById('loaded').style.display = 'block';
                    } else {
                        document.getElementById('empty').style.display = 'block';
                        data = {
                            'file': '',
                            'playback': 0,
                            'notes': []
                        };
                    }

                    if ( data.youtube ) {
                        initializeYoutube( data );
                        return;
                    }
                    localforage.getItem('audiocache').then(function(value) {
                        if( value ) {
                            console.log( value );
                            console.log( 'audio cache' );
                            var url = URL.createObjectURL( value );
                            var fileToPlayback = url;
                            
                            player = document.createElement('audio');
                            player.setAttribute( 'src', fileToPlayback );
                            // player.srcObject = value;
                            player.setAttribute( 'preload', 'auto' );
                            player.setAttribute( 'controls', 'controls' );
                            player.setAttribute( 'title', 'Notable Podcasts' );
                            document.getElementById('player').appendChild( player );
                            if ( data.playback > 0 ) {
                                function scrollToTime() {
                                    this.currentTime = Math.floor( data.playback );
                                    player.removeEventListener('canplaythrough', scrollToTime );
                                }
                                player.addEventListener('canplaythrough', scrollToTime );
                            }
                            player.load();
                            player.addEventListener( 'pause', function( arg ) {
                                if ( logging ) {
                                    newNote( 'pause' );
                                }
                            } );

                        }

                    }).catch(function(err) {
                        console.log(err);
                    });
                }

                
                function newNote( content ) {
                    const t = player.currentTime;
                    data.playback = t;
                    data.notes.push( { note: content, time: t } );
                    localforage.setItem( 'playbackData', data );
                    note2log( { note: content, time: t } );
                }

                var synth = window.speechSynthesis;

                function speak( text ){
                    
                    voices = synth.getVoices().filter( function( v ) {
                        return ( v.lang === 'en-EN' );
                    } );
                    //console.log( voices );
                    if (synth.speaking) {
                        console.error('speechSynthesis.speaking');
                        return;
                    }
                    // if (inputTxt.value !== '') {
                    var utterThis = new SpeechSynthesisUtterance( text );

                    return new Promise( function( resolve, reject ) {
                        utterThis.onend = resolve;
                        utterThis.onerror = reject;
                        utterThis.voice = voices[0];
                        synth.speak(utterThis);
                    } );
                }

                function playClip( time, duration ){
                    player.currentTime = Math.floor( time );
                    return new Promise( function( resolve, reject ) {
                        logging = false;
                        player.play();
                        window.setTimeout( function() {
                            player.pause();
                            logging = true;
                            resolve();
                        }, duration*1000 );
                    } );
                }
                
                window.playClip = playClip;

                document.getElementById('insertnote').addEventListener( 'click', function() {
                    const note = document.getElementById('note').value;
                    if ( note ) {
                        newNote(note);
                        document.getElementById('note').value = '';
                    }
                } );

                document.querySelector('#share').addEventListener( 'click', function() {
                    const rows = data.notes.map( (note) => ( [ note.time, note.note, data.file ] ) );
                    exportToCsv( "podcastNotes.csv", [ [ "Seconds since start", "Note", "Audio URL" ] ].concat( rows ) );
                } );
                document.querySelector('#customplay').addEventListener( 'click', function() {
                    if( data.youtube ) {
                        return player.getPlayerState() === 1 ? player.pauseVideo() : player.playVideo();
                    } else if ( data.file ) {
                        return player.paused ? player.play() : player.pause();
                    }
                } );
                if ( window.location.hash === '#powermode' ) {
                    document.querySelector('#playnotes').style.display = 'inline';
                    document.querySelector('#playnotes').addEventListener( 'click', function() {
                        logging = false;
                        player.pause();
                        const startTime = player.currentTime;
                        logging = true;
                        let chain = speak( 'My notes from podcast: ' );
                        data.notes.forEach( note => {
                            chain = chain.then( () => speak( 'Note at time ' + sec2time( note.time ) + ' is: ' ) );
                            chain = chain.then( () => playClip(  Math.floor( note.time )-5, 20 ) );
                        } );
                        chain.then( () => {
                            player.currentTime = startTime;
                            logging = true;
                        } );
                    } );
                }
                
                document.querySelector('#clear').addEventListener( 'click', function() {
                    if ( true ) {
                        localforage.removeItem( 'playbackData' );
                        localforage.removeItem( 'audiocache' )
                        window.location.reload();
                    }
                } );
                document.querySelector('#newepisode').addEventListener( 'click', function() {
                    const url = document.querySelector('#newaudio').value;
                    if ( found = url.match( /https:\/\/www.youtube.com\/watch\?v=([a-zA-Z0-9]+)/ ) ) {
                        data = {
                                'youtube': found[1],
                                'playback': 0,
                                'notes': []
                            };
                            console.log(data);
                            localforage.setItem( 'playbackData', data );
                            window.location.reload();
                            return;
                    }
                    if( url.indexOf('.mp3') === -1 ) {
                        document.getElementById('feedback').innerText='Please provide an .mp3 file url';
                        return;
                    }
                    console.log( 'downloading', url );
                    const request = new XMLHttpRequest();
                    request.responseType = 'blob';
                    request.onreadystatechange = function() {
                        console.log( request );
                        if (request.readyState === 4 && request.status === 200){
                            localforage.setItem( 'audiocache', request.response ).then( function( savedAudioBlob ) {
                                console.log('Saved Blob URL ' + savedAudioBlob);
                                data = {
                                    'file': document.querySelector('#newaudio').value,
                                    'playback': 0,
                                    'notes': []
                                };
                                console.log(data);
                                localforage.setItem( 'playbackData', data );
                                window.location.reload();
                            } );
                        } else if( request.readyState === 4) {
                            document.getElementById('feedback').innerText='Unfortunately download failed. Please save file locally and upload from the file system.';
                            document.getElementById('feedback').innerHTML += "<a href='" + url + "'>Long press and save this file</a>";
                        } else if ( request.readyState === 3 ) {
                            document.getElementById('feedback').innerText='Downloading now...';
                        } else {
                            document.getElementById('feedback').innerText='Request ready state: ' + request.readyState ;
                        }
                    }
                    request.open( 'GET', url, true )
                    request.send();
                } );
                document.getElementById('file').addEventListener('change', function( evt ) {
                    const theFile = evt.target.files[0];
                    console.log( "Uploading", theFile );
                    var reader = new FileReader();
                    // Closure to capture the file information.
                    reader.onload = function( e ) {
                        console.log(event);
                        var fileString = new Blob( [e.target.result], {type: 'audio/mp3'} );

                        console.log( fileString );
                        localforage.setItem( 'audiocache', fileString ).then( function( savedAudioBlob ) {
                            //console.log('Saved Blob URL ' + savedAudioBlob);
                            data = {
                                'file': theFile.name,
                                'playback': 0,
                                'notes': []
                            };
                            console.log(data);
                            localforage.setItem( 'playbackData', data );
                            window.location.reload();
                        } ).catch( function( err, plop ) {
                            console.log( err, plop );
                        }  );

                    }
                    // Read in the image file as a data URL.
                    reader.readAsArrayBuffer( theFile );
                }, false);

            } );
        </script>
        <script>
            if('serviceWorker' in navigator) {
              navigator.serviceWorker
                       .register('./sw.js')
                       .then(function() { console.log("Service Worker Registered"); });
            }
        </script>    
    </body>
</html>